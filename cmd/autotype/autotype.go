package main

import (
	"fmt"
	"go/types"
	"log"
	"os"
	"text/template"

	"golang.org/x/tools/go/packages"
	"gopkg.in/yaml.v3"
)

var packageHdr = `
// Code generated by "go run types_generate.go"; DO NOT EDIT.

package dns

import (
	"encoding/base64"
	"net"
)

`

var TypeToRR = template.Must(template.New("TypeToRR").Parse(`
// TypeToRR is a map of constructors for each RR type.
var TypeToRR = map[uint16]func() RR{
{{range .}}{{if ne . "RFC3597"}}  Type{{.}}:  func() RR { return new({{.}}) },
{{end}}{{end}}                    }

`))

var typeToString = template.Must(template.New("typeToString").Parse(`
// TypeToString is a map of strings for each RR type.
var TypeToString = map[uint16]string{
{{range .}}{{if ne . "NSAPPTR"}}  Type{{.}}: "{{.}}",
{{end}}{{end}}                    TypeNSAPPTR:    "NSAP-PTR",
}

`))

var headerFunc = template.Must(template.New("headerFunc").Parse(`
{{range .}}  func (rr *{{.}}) Header() *RR_Header { return &rr.Hdr }
{{end}}

`))

// getTypeStruct will take a type and the package scope, and return the
// (innermost) struct if the type is considered a RR type (currently defined as
// those structs beginning with a RR_Header, could be redefined as implementing
// the RR interface). The bool return value indicates if embedded structs were
// resolved.
func getTypeStruct(t types.Type, scope *types.Scope) (*types.Struct, bool) {
	st, ok := t.Underlying().(*types.Struct)
	if !ok {
		return nil, false
	}
	if st.NumFields() == 0 {
		return nil, false
	}
	if st.Field(0).Type() == scope.Lookup("RR_Header").Type() {
		return st, false
	}
	if st.Field(0).Anonymous() {
		st, _ := getTypeStruct(st.Field(0).Type(), scope)
		return st, true
	}
	return nil, false
}

// loadModule retrieves package description for a given module.
func loadModule(name string) (*types.Package, error) {
	conf := packages.Config{Mode: packages.NeedTypes | packages.NeedTypesInfo}
	pkgs, err := packages.Load(&conf, name)
	if err != nil {
		return nil, err
	}
	return pkgs[0].Types, nil
}

// readTypesConfig takes a YAML filename which is in format map[string]map[string]string.
// The first key is the type name, the second key is the field name and the value is the type.
func readTypesConfig(filename string) map[string]map[string]string {
	data, err := os.ReadFile(filename)
	if err != nil {
		log.Fatalf("failed to read file: %v", err)
	}

	typeconfig := make(map[string]map[string]string)
	err = yaml.Unmarshal(data, &typeconfig)
	if err != nil {
		log.Fatalf("failed to unmarshal YAML: %v", err)
	}

	return typeconfig
}

func tagsToMap(_ string) map[string]struct{} {
	return nil
}

func ReadTypesFromModule(modName string, filter map[string]struct{}) (Catalog, error) {

	fmt.Printf("DEBUG: Reading module %s; filter=%v\n", modName, filter)

	// Import and type-check the package
	pkg, err := loadModule(modName)
	//pkg, err := loadModule("github.com/miekg/dns")
	fatalIfErr(err)
	scope := pkg.Scope()

	// // Collect constants like TypeX
	// var numberedTypes []string
	// for _, name := range scope.Names() {
	// 	o := scope.Lookup(name)
	// 	if o == nil || !o.Exported() {
	// 		continue
	// 	}
	// 	b, ok := o.Type().(*types.Basic)
	// 	if !ok || b.Kind() != types.Uint16 {
	// 		continue
	// 	}
	// 	if !strings.HasPrefix(o.Name(), "Type") {
	// 		continue
	// 	}
	// 	name := strings.TrimPrefix(o.Name(), "Type")
	// 	if name == "PrivateRR" {
	// 		continue
	// 	}
	// 	numberedTypes = append(numberedTypes, name)
	// }
	// _ = numberedTypes

	// Collect actual types (*X)
	var namedTypes []string
	for _, name := range scope.Names() {
		o := scope.Lookup(name)
		if o == nil || !o.Exported() {
			continue
		}
		if st, _ := getTypeStruct(o.Type(), scope); st == nil {
			continue
		}
		if name == "PrivateRR" {
			continue
		}

		// Check if corresponding TypeX exists
		if scope.Lookup("Type"+o.Name()) == nil && o.Name() != "RFC3597" {
			log.Fatalf("Constant Type%s does not exist.", o.Name())
		}

		namedTypes = append(namedTypes, o.Name())
	}

	cat := Catalog{}

	//b := &bytes.Buffer{}
	// b.WriteString(packageHdr)

	// // Generate TypeToRR
	// fatalIfErr(TypeToRR.Execute(b, namedTypes))

	// // Generate typeToString
	// fatalIfErr(typeToString.Execute(b, numberedTypes))

	// // Generate headerFunc
	// fatalIfErr(headerFunc.Execute(b, namedTypes))

	// Generate len()
	//fmt.Fprint(b, "// len() functions\n")
	for _, typeName := range namedTypes {

		if len(filter) != 0 {
			if _, ok := filter[typeName]; !ok {
				//fmt.Printf("DEBUG: Skipping %s\n", typeName)
				continue
			}
		}
		fmt.Printf("DEBUG: DOING %s\n", typeName)

		// if _, ok := skipLen[name]; ok {
		// 	continue
		// }
		o := scope.Lookup(typeName)
		st, isEmbedded := getTypeStruct(o.Type(), scope)
		if isEmbedded {
			continue
		}
		// fmt.Fprintf(b, "func (rr *%s) len(off int, compression map[string]struct{}) int {\n", name)
		// fmt.Fprintf(b, "l := rr.Hdr.len(off, compression)\n")
		// fmt.Fprintf(b, "\n")
		// fmt.Fprintf(b, "// %s is the fields needed to store a DNS record of type %s\n", name, name)
		// fmt.Fprintf(b, "type %s struct {\n", name)

		var fields []Field

		for i := 1; i < st.NumFields(); i++ {
			if _, ok := st.Field(i).Type().(*types.Slice); ok {
				// fmt.Fprintf(b, "     slicetype=%s tag=%s\n",
				// 	st.Field(i).Type().String(),
				// 	st.Tag(i),
				// )
				fieldname := st.Field(i).Name()
				slicetype := st.Field(i).Type().String()
				fieldtags := tagsToMap(st.Tag(i))

				fields = append(fields, Field{
					Name: fieldname,
					Type: slicetype,
					Tags: fieldtags,
				})

			} else {
				// fmt.Fprintf(b, "     fieldname=%s type=%s tag=%s\n",
				// 	st.Field(i).Name(),
				// 	st.Field(i).Type().String(),
				// 	st.Tag(i),
				// )
				fieldname := st.Field(i).Name()
				fieldtype := st.Field(i).Type().String()
				if fieldtype == "net.IP" {
					fieldtype = "fieldtypes.IPv4"
				}
				fieldtags := tagsToMap(st.Tag(i))

				fields = append(fields, Field{
					Name: fieldname,
					Type: fieldtype,
					Tags: fieldtags,
				})

			}

			cat[typeName] = RTypeConfig{
				Fields: fields,
			}

			//rtypeConfig.Fieldtypes[fieldname] = fieldtype

			//fieldtags := st.Tag(i)
			//fmt.Fprintf(b, "     //fieldname=%s type=%s tag=%s\n", fieldname, fieldtype, fieldtags)
			// fmt.Fprintf(b, "     %s %s\n", fieldname, fieldtype)

			//fmt.Fprintf(b, "     field: name=%s  field=%s  tag=%s\n", name, st.Field(i).Name(), st.Tag(i))
		}
		// fmt.Fprint(b, "}\n")

	}

	// gofmt
	// res, err := format.Source(b.Bytes())
	// if err != nil {
	// 	b.WriteTo(os.Stderr)
	// 	log.Fatal(err)
	// }
	//	res := b.Bytes()

	// write result
	//f, err := os.Create("types.go")
	//fatalIfErr(err)
	//defer f.Close()
	//fatalIfErr2(f.Write(res))
	return cat, nil
}

func fatalIfErr(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

func fatalIfErr2(_ any, err error) {
	if err != nil {
		log.Fatal(err)
	}
}

func main() {
	var err error

	catalog := Catalog{}

	// 		hints := ReadHints()
	hints := GetHints()
	fmt.Printf("DEBUG: hints = %+v\n", hints)

	// - Read miekg/dns and store data in the catalog.
	// 		catalog = ReadCatalog()
	// 		catalog.PopulateFromModule("github.com/miekg/dns")
	// - Read cloudflareapi/customtypes and store in the catalog.
	// 		catalog.PopulateFromModule("github.com/StackExchange/dnscontrol/v4/providers/cloudflare/customtypes")
	fromDns, err := ReadTypesFromModule("github.com/miekg/dns", hints.Keys())
	if err != nil {
		log.Fatalf("failed to merge MIEKG: %v", err)
	}
	fmt.Printf("DEBUG: miekg = %+v\n", fromDns)

	err = catalog.MergeCat(fromDns)
	if err != nil {
		log.Fatalf("failed to merge MIEKG: %v", err)
	}
	fmt.Printf("DEBUG: cat + miekg = %+v\n", catalog)

	// - Merge in the hints.
	//      Reads the hints file.
	// 		catalog.OverlayHints(hints)

	catalog.MergeHints(hints)
	fmt.Printf("DEBUG: cat+hints = %+v\n", catalog)

	// - Generate RecordType interface.
	// - Generate   MustRegisterType("A", RegisterOpts{PopulateFromRaw: PopulateFromRawA})
	// - Generate "type A"
	// - Generate ParseA
	// - Generate PopulateFromRawA
	// - Generate AsA
	// - Generate GetFields()
	// - Generate GetFieldsAsStringsA()

}
