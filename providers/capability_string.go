// Code generated by "stringer -type=Capability"; DO NOT EDIT.

package providers

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CanAutoDNSSEC-0]
	_ = x[CanGetZones-1]
	_ = x[CanUseAKAMAICDN-2]
	_ = x[CanUseAlias-3]
	_ = x[CanUseAzureAlias-4]
	_ = x[CanUseCAA-5]
	_ = x[CanUseDHCID-6]
	_ = x[CanUseDS-7]
	_ = x[CanUseDSForChildren-8]
	_ = x[CanUseLOC-9]
	_ = x[CanUseNAPTR-10]
	_ = x[CanUsePTR-11]
	_ = x[CanUseRoute53Alias-12]
	_ = x[CanUseSOA-13]
	_ = x[CanUseSRV-14]
	_ = x[CanUseSSHFP-15]
	_ = x[CanUseTLSA-16]
	_ = x[DocCreateDomains-17]
	_ = x[DocDualHost-18]
	_ = x[DocOfficiallySupported-19]
}

const _Capability_name = "CanAutoDNSSECCanGetZonesCanUseAKAMAICDNCanUseAliasCanUseAzureAliasCanUseCAACanUseDHCIDCanUseDSCanUseDSForChildrenCanUseLOCCanUseNAPTRCanUsePTRCanUseRoute53AliasCanUseSOACanUseSRVCanUseSSHFPCanUseTLSADocCreateDomainsDocDualHostDocOfficiallySupported"

var _Capability_index = [...]uint8{0, 13, 24, 39, 50, 66, 75, 86, 94, 113, 122, 133, 142, 160, 169, 178, 189, 199, 215, 226, 248}

func (i Capability) String() string {
	if i >= Capability(len(_Capability_index)-1) {
		return "Capability(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Capability_name[_Capability_index[i]:_Capability_index[i+1]]
}
