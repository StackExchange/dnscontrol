// Code generated by "stringer -type=Capability"; DO NOT EDIT.

package providers

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CanUseAlias-0]
	_ = x[CanUseCAA-1]
	_ = x[CanUseDS-2]
	_ = x[CanUsePTR-3]
	_ = x[CanUseNAPTR-4]
	_ = x[CanUseSRV-5]
	_ = x[CanUseSSHFP-6]
	_ = x[CanUseTLSA-7]
	_ = x[CanUseTXTMulti-8]
	_ = x[CanAutoDNSSEC-9]
	_ = x[CantUseNOPURGE-10]
	_ = x[DocOfficiallySupported-11]
	_ = x[DocDualHost-12]
	_ = x[DocCreateDomains-13]
	_ = x[CanUseRoute53Alias-14]
	_ = x[CanGetZones-15]
	_ = x[CanUseAzureAlias-16]
}

const _Capability_name = "CanUseAliasCanUseCAACanUseDSCanUsePTRCanUseNAPTRCanUseSRVCanUseSSHFPCanUseTLSACanUseTXTMultiCanAutoDNSSECCantUseNOPURGEDocOfficiallySupportedDocDualHostDocCreateDomainsCanUseRoute53AliasCanGetZonesCanUseAzureAlias"

var _Capability_index = [...]uint8{0, 11, 20, 28, 37, 48, 57, 68, 78, 92, 105, 119, 141, 152, 168, 186, 197, 213}

func (i Capability) String() string {
	if i >= Capability(len(_Capability_index)-1) {
		return "Capability(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Capability_name[_Capability_index[i]:_Capability_index[i+1]]
}
