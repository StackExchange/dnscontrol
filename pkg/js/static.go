// Code generated by "esc"; DO NOT EDIT.

package js

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/helpers.js": {
		name:    "helpers.js",
		local:   "pkg/js/helpers.js",
		size:    22809,
		modtime: 0,
		compressed: `
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
AAD//2GeotkZWQAA
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
