// Code generated by "esc "; DO NOT EDIT.

package js

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/helpers.js": {
		local:   "pkg/js/helpers.js",
		size:    21885,
		modtime: 0,
		compressed: `
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
`,
	},

	"/": {
		isDir: true,
		local: "pkg/js",
	},
}
