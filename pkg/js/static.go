// Code generated by "esc "; DO NOT EDIT.

package js

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/helpers.js": {
		local:   "pkg/js/helpers.js",
		size:    17337,
		modtime: 0,
		compressed: `
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
AP//3VPAQ7lDAAA=
`,
	},

	"/": {
		isDir: true,
		local: "pkg/js",
	},
}
