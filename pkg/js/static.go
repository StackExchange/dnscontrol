// Code generated by "esc "; DO NOT EDIT.

package js

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/helpers.js": {
		local:   "pkg/js/helpers.js",
		size:    22154,
		modtime: 0,
		compressed: `
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
VIpWAAA=
`,
	},

	"/": {
		isDir: true,
		local: "pkg/js",
	},
}
