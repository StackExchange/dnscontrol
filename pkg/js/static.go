// Code generated by "esc"; DO NOT EDIT.

package js

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/helpers.js": {
		name:    "helpers.js",
		local:   "pkg/js/helpers.js",
		size:    25301,
		modtime: 0,
		compressed: `
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
1D0HGAkW/y8AAP//X6n0gNViAAA=
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
