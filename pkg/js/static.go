// Code generated by "esc"; DO NOT EDIT.

package js

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/helpers.js": {
		name:    "helpers.js",
		local:   "pkg/js/helpers.js",
		size:    22531,
		modtime: 0,
		compressed: `
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
Q1uGwQNYAAA=
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
