// Code generated by "esc "; DO NOT EDIT.

package js

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/helpers.js": {
		local:   "pkg/js/helpers.js",
		size:    16789,
		modtime: 0,
		compressed: `
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
`,
	},

	"/": {
		isDir: true,
		local: "pkg/js",
	},
}
