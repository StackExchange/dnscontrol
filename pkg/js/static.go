// Code generated by "esc "; DO NOT EDIT.

package js

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/helpers.js": {
		local:   "pkg/js/helpers.js",
		size:    14948,
		modtime: 0,
		compressed: `
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
NdDlyNv9KIeDsPV/AQAA//+AFZySZDoAAA==
`,
	},

	"/": {
		isDir: true,
		local: "pkg/js",
	},
}
