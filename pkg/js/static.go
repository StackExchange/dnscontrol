// Code generated by "esc "; DO NOT EDIT.

package js

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/helpers.js": {
		local:   "pkg/js/helpers.js",
		size:    16114,
		modtime: 0,
		compressed: `
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
35eq0xlIa9v6vwAAAP//REpIKvI+AAA=
`,
	},

	"/": {
		isDir: true,
		local: "pkg/js",
	},
}
