// Code generated by "esc "; DO NOT EDIT.

package js

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/helpers.js": {
		local:   "pkg/js/helpers.js",
		size:    20010,
		modtime: 0,
		compressed: `
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
cogqTgAA
`,
	},

	"/": {
		isDir: true,
		local: "pkg/js",
	},
}
