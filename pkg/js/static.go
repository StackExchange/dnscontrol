// Code generated by "esc "; DO NOT EDIT.

package js

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/helpers.js": {
		local:   "pkg/js/helpers.js",
		size:    15321,
		modtime: 0,
		compressed: `
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
`,
	},

	"/": {
		isDir: true,
		local: "pkg/js",
	},
}
